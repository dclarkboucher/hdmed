source("R/lvma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
out <- mediate_lvma(A, M, Y, q = 4, rhoLM = 2, rhoEL = 2, rhoLY = 2, imax = 50)
rm(list=ls())
load("data/med_dat.rda")
source("R/lvma.R")
source("R/lvma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
out <- mediate_lvma(A, M, Y, q = 4, rhoLM = 2, rhoEL = 2, rhoLY = 2, imax = 50)
#LVMA example
library(psych)
library(Matrix)
rm(list=ls())
load("data/med_dat.rda")
source("R/lvma.R")
source("R/lvma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
out <- mediate_lvma(A, M, Y, q = 4, rhoLM = 2, rhoEL = 2, rhoLY = 2, imax = 50)
#LVMA example
library(psych)
library(Matrix)
rm(list=ls())
load("data/med_dat.rda")
source("R/lvma.R")
source("R/lvma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
out <- mediate_lvma(A, M, Y, q = 4, rhoLM = 2, rhoEL = 2, rhoLY = 2, imax = 50)
?ncol
#LVMA example
library(psych)
library(Matrix)
rm(list=ls())
load("data/med_dat.rda")
source("R/lvma.R")
source("R/lvma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
out <- mediate_lvma(A, M, Y, q = 4, rhoLM = 2, rhoEL = 2, rhoLY = 2, imax = 50)
out$EBIC_out
#LVMA example
library(psych)
library(Matrix)
rm(list=ls())
load("data/med_dat.rda")
source("R/lvma.R")
source("R/lvma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
out <- mediate_lvma(A, M, Y, q = 4, rhoLM = 2, rhoEL = 2, rhoLY = 2, imax = 50)
#LVMA example
library(psych)
library(Matrix)
rm(list=ls())
load("data/med_dat.rda")
source("R/lvma.R")
source("R/lvma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
out <- mediate_lvma(A, M, Y, q = 4, rhoLM = 2, rhoEL = 2, rhoLY = 2, imax = 50)
table(out$EBIC_out$mediator_active)
library(Matrix)
rm(list=ls())
load("data/med_dat.rda")
source("R/lvma.R")
#LVMA example
library(psych)
library(Matrix)
rm(list=ls())
load("data/med_dat.rda")
source("R/lvma.R")
source("R/lvma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
out <- mediate_lvma(A, M, Y, q = 4, rhoLM = 2, rhoEL = 2, rhoLY = 2, imax = 50)
table(out$EBIC_out$mediator_active)
dim(M)
# HILMA example
rm(list=ls())
load("data/med_dat.rda")
# HILMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hilma.R")
source("R/hilma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_hilma(A, M, Y)
library(hilma)
library(freebird)
# HILMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hilma.R")
source("R/hilma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
library(freebird)
out <- mediate_hilma(A, M, Y)
out
out <- mediate_hilma(A, M, Y, nlambda = 5, aic_tuning = T)
out$a1
?rnorm
A1 <- cbind(A, rnorm(100))
colnames(A1) <- paste0("c",1:2)
A1 <- cbind(A, rnorm(100))
colnames(A1) <- paste0("c",1:2)
out <- mediate_hilma(A1, M, Y, nlambda = 5, aic_tuning = T)
out$c1
out$c2
?bama
library(bama)
library(HIMA)
?hima
devtools::document()
devtools::document()
warnings()
devtools::document()
warnings()
warnings()
devtools::document()
warnings()
library(genlasso)
devtools::document()
warnings()
?gcdnet
data(FHT)
# 1. solution paths for the LASSO penalized least squares.
# To use LASSO set lambda2 = 0.
m1 <- gcdnet(x = FHT$x, y = FHT$y_reg, lambda2 = 0, method = "ls")
library(gcdnet)
data(FHT)
# 1. solution paths for the LASSO penalized least squares.
# To use LASSO set lambda2 = 0.
m1 <- gcdnet(x = FHT$x, y = FHT$y_reg, lambda2 = 0, method = "ls")
plot(m1)
coeffients(m1)
?coef
coef(m1)
coefficients(m1)
gcdnet::coefficients(m1)
devtools::document()
devtools::document()
devtools::document()
warnings()
?psych::mediate
?mediation::mediate
devtools::document()
rm(list=ls())
source("C:/Users/dc48b/Dropbox (Personal)/GSRA Fall 2021/mediation_package/MultiMed/R/lvma_utils.R")
?varimax
?Matrix::head
?Matrix::head()
?head
source("C:/Users/dc48b/Dropbox (Personal)/GSRA Fall 2021/mediation_package/MultiMed/R/lvma_utils.R")
rm(list=ls())
load("data/med_dat.rda")
source("R/lvma.R")
source("R/lvma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
out <- mediate_lvma(A, M, Y, q = 4, rhoLM = 2, rhoEL = 2, rhoLY = 2, imax = 50)
tr <- psych::tr()
tr <- psych::tr
out <- mediate_lvma(A, M, Y, q = 4, rhoLM = 2, rhoEL = 2, rhoLY = 2, imax = 50)
?tr
#LVMA example
library(Matrix)
rm(list=ls())
load("data/med_dat.rda")
source("R/lvma.R")
source("R/lvma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
out <- mediate_lvma(A, M, Y, q = 4, rhoLM = 2, rhoEL = 2, rhoLY = 2, imax = 50)
table(out$EBIC_out$mediator_active)
?mediate_hilma
devtools::document()
library(bama)
rm(list=ls())
load("data/med_dat.rda")
source("R/pathway_lasso.R")
source("R/pathway_lasso_utils.R")
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_plasso(A, M, Y, lambdas = c(10^-2))
head(out$all_fits$lambda1)
?tr
rm(list=ls())
load("data/med_dat.rda")
source("R/pathway_lasso.R")
source("R/pathway_lasso_utils.R")
?tr
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_plasso(A, M, Y, lambdas = c(10^-2))
head(out$all_fits$lambda1)
devtools::document()
devtools::document()
rm(list=ls())
devtools::document()
library(freebird)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
roxygen2::roxygenize(load_code = "source")
usethis::use_package("stats")
usethis::use_package("matrix")
usethis::use_package("Matrix")
usethis::use_package("bama")
usethis::use_package("glmnet")
usethis::use_package("gcdnet")
usethis::use_package("foreach")
usethis::use_package("hdi")
usethis::use_package("MASS")
usethis::use_package("utils")
usethis::use_package("iterators")
usethis::use_package("lars")
usethis::use_package("scalreg")
usethis::use_package("MASS")
usethis::use_package("mediation")
usethis::use_package("Rmosek")
usethis::use_package("freebird")
usethis::use_package("ncvreg")
usethis::use_package("sandwich")
library(usethis)
?use_package
usethis::use_package("sandwich", min_version = T)
usethis::use_package("lars", min_version = T)
usethis::use_package("MASS", min_version = T)
usethis::use_package("Matrix", min_version = T)
usethis::use_package("mediation", min_version = T)
usethis::use_package("ncvreg", min_version = T)
usethis::use_package("Rmosek", min_version = T)
usethis::use_package("scalreg", min_version = T)
usethis::use_package("stats", min_version = T)
usethis::use_package("bama", min_version = T)
usethis::use_package("freebird", min_version = T)
usethis::use_package("foreach", min_version = T)
usethis::use_package("gcdnet", min_version = T)
usethis::use_package("hdi", min_version = T)
usethis::use_package("iterators", min_version = T)
usethis::use_package("utils", min_version = T)
rm(list=ls())
document()
devtools::document()
usethis::use_package("genlasso", min_version = T)
rm(list=ls())
load("data/med_dat.rda")
source("R/pcma.R")
source("R/spcma.R")
source("R/spcma_utils.R")
library(mediation)
usethis::use_package("glmnet", min_version = T)
library(genlasso)
usethis::use_package("glmnet", min_version = T)
devtools::document()
rm(list=ls())
devtools::document()
usethis::use_package("bama", min_version = T)
devtools::document()
usethis::use_package("psych", min_version = T)
devtools::document()
?crossprod
rm(list=ls())
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
source("R/hdmm_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_hdmm(A, M, Y, sims = 50)
out
?addterm
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
source("R/hdmm_utils.R")
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_hdmm(A, M, Y, sims = 50)
?addterm
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
source("R/hdmm_utils.R")
?addterm
?addterm
?addterm
?bama
?genlasso
#HIMA HDMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hima_hdma_utils.R")
source("R/hima.R")
source("R/hdma.R")
str(med_dat)
?genlasso
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out1 <- mediate_hima(A, M, Y); out1
#HIMA
# library(ncvreg)
# library(MASS)
# library(foreach)
out1 <- mediate_hima(A, M, Y); out1
#HIMA HDMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hima_hdma_utils.R")
source("R/hima.R")
source("R/hdma.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
#HIMA
# library(ncvreg)
# library(MASS)
# library(foreach)
out1 <- mediate_hima(A, M, Y); out1
library(foreach)
?%dopar%
#HIMA
# library(ncvreg)
# library(MASS)
library(foreach)
out1 <- mediate_hima(A, M, Y); out1
#HIMA HDMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hima_hdma_utils.R")
source("R/hima.R")
source("R/hdma.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
#HIMA
# library(ncvreg)
# library(MASS)
library(foreach)
out1 <- mediate_hima(A, M, Y); out1
#HDMA
# library(hdi)
# library(scalreg)
# library(lars)
out2 <- mediate_hdma(A, M, Y); out2
#HIMA HDMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hima_hdma_utils.R")
source("R/hima.R")
source("R/hdma.R")
str(med_dat)
#HDMA
# library(hdi)
# library(scalreg)
# library(lars)
out2 <- mediate_hdma(A, M, Y); out2
#HDMA
# library(hdi)
# library(scalreg)
# library(lars)
out2 <- mediate_hdma(A, M, Y); out2
rm(list=ls())
#HIMA HDMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hima_hdma_utils.R")
source("R/hima.R")
source("R/hdma.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
#HIMA
# library(ncvreg)
# library(MASS)
library(foreach)
out1 <- mediate_hima(A, M, Y); out1
#HDMA
# library(hdi)
# library(scalreg)
# library(lars)
out2 <- mediate_hdma(A, M, Y); out2
#HIMA HDMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hima_hdma_utils.R")
source("R/hima.R")
source("R/hdma.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
#HIMA
# library(ncvreg)
# library(MASS)
library(foreach)
out1 <- mediate_hima(A, M, Y); out1
#HDMA
# library(hdi)
# library(scalreg)
# library(lars)
out2 <- mediate_hdma(A, M, Y); out2
#HDMA
# library(hdi)
# library(scalreg)
# library(lars)
out2 <- mediate_hdma(A, M, Y); out2
#HDMA
# library(hdi)
# library(scalreg)
# library(lars)
out2 <- mediate_hdma(A, M, Y); out2
#HDMA
# library(hdi)
# library(scalreg)
# library(lars)
out2 <- mediate_hdma(A, M, Y); out2
devtools::document()
rm(list=ls())
devtools::document()
?rnorm
