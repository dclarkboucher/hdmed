str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
# Binary example
C <- matrix(rnorm(200),ncol = 2)
Y1 <- ifelse(Y > mean(Y), 1, 0)
out2 <- lvma(A, M, Y1, C = C, q = q, binary_y = T, rhoL = 10,
rhoE = 10, rhoY = 10, 5000)
dim(C
)
length(Y1)
dim(M)
source("C:/Users/dc48b/Dropbox (Personal)/GSRA Fall 2021/mediation_package/MultiMed/R/lvma_utils.R")
# Binary example
C <- matrix(rnorm(200),ncol = 2)
Y1 <- ifelse(Y > mean(Y), 1, 0)
out2 <- lvma(A, M, Y1, C = C, q = q, binary_y = T, rhoL = 10,
rhoE = 10, rhoY = 10, 5000)
# LVMA function called by mediate_lvma wrapper
lvma <- function (A, M, Y, C = NULL, q, binary_y, rhoL, rhoE, rhoY, imax) {
if(binary_y){
cases <- Y == 1
controls <- !cases
Xcase <- as.vector(
scale(A[cases], center = mean(A[controls], scale = sd(A[controls]))))
Xcont <- as.vector(scale(A[controls]))
Mcase <- scale(M[cases,], center = colMeans(M[controls,]),
scale = apply(M[controls,], 2, sd))
Mcont <- scale(M[controls,])
if(!is.null(C)){
CovCase <- matrix(C[cases, ], ncol = ncol(C))
CovCont <- matrix(C[controls, ], ncol = ncol(C))
}else{
CovCase <- NULL
CovCont <- NULL
}
Obs_Data <-
list(
Xcase = Xcase,
Xcont = Xcont,
Mcase = Mcase,
Mcont = Mcont,
CovCase = CovCase,
CovCont = CovCont
)
M1 <- rbind(Mcase, Mcont)
aa <- prcomp(M1, scale = TRUE, center = TRUE)
Loadings <- aa$rotation[, 1:q]
for (jjj in 1:q) {
k = rank(-abs(Loadings[, jjj]))
Loadings[k > 50, jjj] = 0
}
out <-
run_LVMA_Binary(
Obs_Data = Obs_Data,
Loadings,
rhoL = rhoL,
rhoE = rhoE,
rhoY = rhoY,
niter = imax
)
}else{
Obs_Data = list(
E = matrix(A, ncol = 1),
Y = matrix(Y, ncol = 1),
M = M,
Covariates = C
)
AC <- as.data.frame(cbind(A, C))
MR <- apply(M, 2, function(x) lm(x ~ ., data = AC)$residuals)
aa = prcomp(MR, scale = TRUE, center = TRUE)
Loadings = varimax(aa$rotation[, 1:q])$loadings
out <-
run_LVMA_Cont(
Obs_Data = Obs_Data,
Loadings,
rhoL = rhoL,
rhoE = rhoE,
rhoY = rhoY,
niter = imax
)
}
out
}
#LVMA example
library(psych)
library(Matrix)
rm(list=ls())
load("data/med_dat.rda")
source("R/lvma.R")
source("R/lvma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
# more iterations should be used in practice; see default value
out1 <- lvma(A, M, Y, C = NULL, q = q, binary_y = F, rhoL = rhoLM,
rhoE = rhoEL, rhoY = rhoLY, 500)
str(out1)
# Process out using EBIC
EBIC <- out1$val_EBIC
which_chosen <- out1$model_selectionEBIC
penalty <- c(rhoLM[which_chosen[1]], rhoEL[which_chosen[2]],
rhoLY[which_chosen[3]])
names(penalty) <- c("rhoLM", "rhoEL", "rhoLY")
LM_effects <- out1$EBIC_sol$Lambda
colnames(LM_effects) <- paste0("L", 1:q)
rownames(LM_effects) <- colnames(M)
LY_effects <- out1$EBIC_sol$betaFY
names(LY_effects) <- paste0("L", 1:q)
AL_effects <- as.vector(out1$EBIC_sol$betaEF)
names(AL_effects) <- paste0("L", 1:q)
AY_direct_effect <- out1$EBIC_sol$betaEY
mediator_active <-
suppressWarnings(apply(t(LM_effects) * (AL_effects * LY_effects), 2, any)) |>
as.numeric()
table(mediator_active)
output <-
list(
EBIC = EBIC,
penalty = penalty,
AL_effects = AL_effects,
LM_effects = LM_effects,
AY_direct_effect = AY_direct_effect,
LY_effects = LY_effects,
mediator_active
)
# Binary example
C <- matrix(rnorm(200),ncol = 2)
Y1 <- ifelse(Y > mean(Y), 1, 0)
out2 <- lvma(A, M, Y1, C = C, q = q, binary_y = T, rhoL = 10,
rhoE = 10, rhoY = 10, 5000)
# Binary example
C <- matrix(rnorm(200),ncol = 2)
Y1 <- ifelse(Y > mean(Y), 1, 0)
out2 <- lvma(A, M, Y1, C = C, q = q, binary_y = T, rhoL = 4,
rhoE = 4, rhoY = 4, 5000)
#LVMA example
library(psych)
library(Matrix)
rm(list=ls())
load("data/med_dat.rda")
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
cases <- Y == 1
controls <- !cases
Xcase <- as.vector(
scale(A[cases], center = mean(A[controls], scale = sd(A[controls]))))
Xcont <- as.vector(scale(A[controls]))
Mcase <- scale(M[cases,], center = colMeans(M[controls,]),
scale = apply(M[controls,], 2, sd))
Mcont <- scale(M[controls,])
str(C)
# Binary example
C <- matrix(rnorm(200),ncol = 2)
str(C)
if(!is.null(C)){
CovCase <- matrix(C[cases, ], ncol = ncol(C))
CovCont <- matrix(C[controls, ], ncol = ncol(C))
}else{
CovCase <- NULL
CovCont <- NULL
}
str(CovCase)
rm(list=ls())
#LVMA example
library(psych)
library(Matrix)
rm(list=ls())
load("data/med_dat.rda")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
# more iterations should be used in practice; see default value
out1 <- lvma(A, M, Y, C = NULL, q = q, binary_y = F, rhoL = rhoLM,
rhoE = rhoEL, rhoY = rhoLY, 500)
# Binary example
C <- matrix(rnorm(200),ncol = 2)
Y1 <- ifelse(Y > mean(Y), 1, 0)
cases <- Y == 1
controls <- !cases
table(cases)
str(Y)
str(Y1)
Y <- Y1
rm(list=ls())
#LVMA example
library(psych)
library(Matrix)
rm(list=ls())
load("data/med_dat.rda")
source("R/lvma.R")
source("R/lvma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
# more iterations should be used in practice; see default value
out1 <- lvma(A, M, Y, C = NULL, q = q, binary_y = F, rhoL = rhoLM,
rhoE = rhoEL, rhoY = rhoLY, 500)
str(out1)
# Process out using EBIC
EBIC <- out1$val_EBIC
which_chosen <- out1$model_selectionEBIC
penalty <- c(rhoLM[which_chosen[1]], rhoEL[which_chosen[2]],
rhoLY[which_chosen[3]])
names(penalty) <- c("rhoLM", "rhoEL", "rhoLY")
LM_effects <- out1$EBIC_sol$Lambda
colnames(LM_effects) <- paste0("L", 1:q)
rownames(LM_effects) <- colnames(M)
LY_effects <- out1$EBIC_sol$betaFY
names(LY_effects) <- paste0("L", 1:q)
AL_effects <- as.vector(out1$EBIC_sol$betaEF)
names(AL_effects) <- paste0("L", 1:q)
AY_direct_effect <- out1$EBIC_sol$betaEY
mediator_active <-
suppressWarnings(apply(t(LM_effects) * (AL_effects * LY_effects), 2, any)) |>
as.numeric()
table(mediator_active)
output <-
list(
EBIC = EBIC,
penalty = penalty,
AL_effects = AL_effects,
LM_effects = LM_effects,
AY_direct_effect = AY_direct_effect,
LY_effects = LY_effects,
mediator_active
)
# Binary example
Covars <- matrix(rnorm(200),ncol = 2)
Y1 <- ifelse(Y > mean(Y), 1, 0)
out2 <- lvma(A, M, Y = Y1, C = Covars, q = q, binary_y = T, rhoL = 4,
rhoE = 4, rhoY = 4, 5000)
Y <- Y1
C <- Covars
cases <- Y == 1
controls <- !cases
Xcase <- as.vector(
scale(A[cases], center = mean(A[controls], scale = sd(A[controls]))))
Xcont <- as.vector(scale(A[controls]))
Mcase <- scale(M[cases,], center = colMeans(M[controls,]),
scale = apply(M[controls,], 2, sd))
Mcont <- scale(M[controls,])
table(cases)
table(controls)
str(Xcase)
str(Xcont)
str(Mcase)
if(!is.null(C)){
CovCase <- matrix(C[cases, ], ncol = ncol(C))
CovCont <- matrix(C[controls, ], ncol = ncol(C))
}else{
CovCase <- NULL
CovCont <- NULL
}
str(CovCase)
str(CovCont)
#LVMA example
library(psych)
library(Matrix)
rm(list=ls())
load("data/med_dat.rda")
source("R/lvma.R")
source("R/lvma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
C <- matrix(rnorm(200), 2)
# more iterations should be used in practice; see default value
out1 <- lvma(A, M, Y, C = NULL, q = q, binary_y = F, rhoL = rhoLM,
rhoE = rhoEL, rhoY = rhoLY, 500)
C <- matrix(rnorm(200), 2)
# more iterations should be used in practice; see default value
out1 <- lvma(A, M, Y, C = NULL, q = q, binary_y = F, rhoL = rhoLM,
rhoE = rhoEL, rhoY = rhoLY, 50)
C <- matrix(rnorm(200), 2)
# more iterations should be used in practice; see default value
out1 <- lvma(A, M, Y, C = C, q = q, binary_y = F, rhoL = rhoLM,
rhoE = rhoEL, rhoY = rhoLY, 50)
C <- matrix(rnorm(200), ncol = 2)
# more iterations should be used in practice; see default value
out1 <- lvma(A, M, Y, C = C, q = q, binary_y = F, rhoL = rhoLM,
rhoE = rhoEL, rhoY = rhoLY, 50)
#LVMA example
library(psych)
library(Matrix)
rm(list=ls())
load("data/med_dat.rda")
source("R/lvma.R")
source("R/lvma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
# more iterations should be used in practice; see default value
out1 <- lvma(A, M, Y, q = q, rhoL = rhoLM, rhoE = rhoEL, rhoY = rhoLY, 50)
#LVMA example
library(psych)
library(Matrix)
rm(list=ls())
load("data/med_dat.rda")
source("R/lvma.R")
source("R/lvma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# inputs
rhoLM = 2
rhoEL = 2
rhoLY = 2
q <- 4
# more iterations should be used in practice; see default value
out1 <- lvma(A, M, Y, q = q, rhoL = rhoLM, rhoE = rhoEL, rhoY = rhoLY, 50)
str(out1)
library(foreach)
?registerDoSEQ
#HIMA HDMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hima_hdma_utils.R")
source("R/hima.R")
source("R/hdma.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
#HIMA
out1 <- mediate_hima(A, M, Y)
#HIMA
library(ncvreg)
library(MASS)
library(foreach)
out1 <- mediate_hima(A, M, Y)
source("R/hima.R")
source("R/hdma.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
#HIMA
library(ncvreg)
library(MASS)
library(foreach)
out1 <- mediate_hima(A, M, Y)
out21
out1
#HIMA HDMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hima_hdma_utils.R")
source("R/hima.R")
source("R/hdma.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
#HIMA
library(ncvreg)
library(MASS)
library(foreach)
out1 <- mediate_hima(A, M, Y)
str(out1)
out1$contributions
out1$effects
rm(list=ls())
#HIMA HDMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hima_hdma_utils.R")
source("R/hima.R")
source("R/hdma.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
#HIMA
library(ncvreg)
library(MASS)
library(foreach)
out1 <- mediate_hima(A, M, Y)
#HIMA HDMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hima_hdma_utils.R")
source("R/hima.R")
source("R/hdma.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
#HIMA
library(ncvreg)
library(MASS)
library(foreach)
out1 <- mediate_hima(A, M, Y)
out1
#HIMA HDMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hima_hdma_utils.R")
source("R/hima.R")
source("R/hdma.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
#HIMA
library(ncvreg)
library(MASS)
library(foreach)
out1 <- mediate_hima(A, M, Y)
out1
out1 <- mediate_hima(A, M, Y); out1
out1 <- mediate_hima(A, M, Y); out1
out2 <- mediate_hdma(A, M, Y); out2
#HIMA HDMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hima_hdma_utils.R")
source("R/hima.R")
source("R/hdma.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
#HIMA
library(ncvreg)
library(MASS)
library(foreach)
out1 <- mediate_hima(A, M, Y); out1
#HDMA
library(hdi)
library(scalreg)
library(lars)
out2 <- mediate_hdma(A, M, Y); out2
#HIMA HDMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hima_hdma_utils.R")
source("R/hima.R")
source("R/hdma.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
#HIMA
library(ncvreg)
library(MASS)
library(foreach)
out1 <- mediate_hima(A, M, Y); out1
#HDMA
library(hdi)
library(scalreg)
library(lars)
out2 <- mediate_hdma(A, M, Y); out2
# MedFix
rm(list=ls())
load("data/med_dat.rda")
source("R/hima_hdma_utils.R")
source("R/hima.R")
source("R/hdma.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
# MedFix
rm(list=ls())
load("data/med_dat.rda")
source("R/medfix.R")
source("R/medfix_utils.R")
str(med_dat)
