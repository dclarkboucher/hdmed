source("R/spcma.R")
source("R/spcma_utils.R")
source("R/spcma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_spcma(A, M, Y, n_pc = 3, sims = 10, per_jump = 0.9)
rm(list=ls())
load("data/med_dat.rda")
source("R/pcma.R")
source("R/spcma.R")
source("R/spcma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_spcma(A, M, Y, n_pc = 3, sims = 10, per_jump = 0.9)
rm(list=ls())
load("data/med_dat.rda")
source("R/pcma.R")
source("R/spcma.R")
source("R/spcma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_spcma(A, M, Y, n_pc = 3, sims = 10, per_jump = 0.9)
out
rm(list=ls())
# HILMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hilma.R")
source("R/hilma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_hilma(A, M, Y, nlambda = 5, aic_tuning = T)
out$c1
out
# HILMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hilma.R")
source("R/hilma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
library(freebird)
out <- mediate_hilma(A, M, Y, nlambda = 5, aic_tuning = T)
# HILMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hilma.R")
source("R/hilma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
library(freebird)
out <- mediate_hilma(A, M, Y, nlambda = 5, aic_tuning = T)
out
rm(list=ls())
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
?qnorm
?quantile
?optim
?lm
rm(list=ls())
?quantile
load("data/med_dat.rda")
source("R/bslmm.R")
library(bama)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_bslmm(A, M, Y, burnin = 100, ndraws = 10)
str(Y)
is.numeric(Y)
load("data/med_dat.rda")
str(med_dat$Y)
#Script to make data
set.seed(1)
n <- 100
p <- 20
A <- rnorm(n)
alpha <- rep(0,p)
beta <- rep(0,p)
alpha[1:10] <- rnorm(10, 0.1, 0.2)
beta[c(1:5,11:15)] <- rnorm(10, 0.1, 0.2)
M <- A %*% t(alpha) + matrix(rnorm(n * p), n)
colnames(M) <- paste0("m", 1:p)
Y <- M %*% beta + rnorm(100)
C1 <- matrix(rnorm(n * 2), n)
C2 <- matrix(rnorm(n * 2), n)
med_dat <- list(A = as.vector(A), M = M, Y = as.vector(Y))
usethis::use_data(med_dat)
usethis::use_data(med_dat, overwrite = T)
rm(list=ls())
freebird::hilma()
devtools::document()
devtools::check()
getwd()
devtools::document()
?gcnet
?gcdnet
devtools::document()
?gcdnet
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
usethis::use_gpl3_license()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
# HILMA example
rm(list=ls())
load("data/med_dat.rda")
source("R/hilma.R")
source("R/hilma_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
library(freebird)
out <- mediate_hilma(A, M, Y, nlambda = 5, aic_tuning = T)
out$a1
A1 <- cbind(A, rnorm(100))
colnames(A1) <- paste0("c",1:2)
out <- mediate_hilma(A1, M, Y, nlambda = 5, aic_tuning = T)
out$c1
out$c2
usethis::use_readme_rmd()
devtools::build_readme()
usethis::use_readme_md()
devtools::build_readme()
library(hdi)
library(ncvreg)
devtools::document()
library(foreach)
devtools::document()
library(gcdnet)
?coef
devtools::document()
devtools::document()
data(mtcars)
library(gcdnet)
fit <- gcdnet(mtcars$wt,mtcars$mpg)
fit <- gcdnet(mtcars$wt,mtcars$mpg, family = "gaussian")
?gcdnet
?genlasso
devtools::document()
devtools::document()
library(ncvreg)
?coef.ncvreg
library(PDM)
devtools::document()
?coef
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::check()
?qnorm
devtools::document()
devtools::build()
devtools::check()
?nextElem
devtools::document()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
library(HIMA)
?hima
rm(list=ls())
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::build()
devtools::check()
devtools::check_rhub()
devtools::document()
devtools::document()
devtools::document()
devtools::build_readme()
usethis::use_readme_rmd()
usethis::use_readme_rmd()
devtools::build_readme()
devtools::document()
devtools::build()
devtools::check()
devtools::build_readme()
devtools::document()
devtools::build()
devtools::check()
devtools::check_rhub()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
source("R/hdmm_utils.R")
library(MASS)
library(mediation)
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_hdmm(A, M, Y, sims = 50)
str(M)
out <- mediate_hdmm(A, M[,1:10], Y, sims = 50)
?solve
?crossprod
rm(list=ls())
devtools::document()
devtools::document()
library(Matrix)
?solve
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
usethis::use_package("Matrix", min_version = T)
devtools::document()
devtools::document()
devtools::build()
devtools::check()
Matrix::solve
solve
?uniroot
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
source("R/hdmm_utils.R")
library(MASS)
library(mediation)
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_hdmm(A, M[,1:10], Y, sims = 50)
out <- mediate_hdmm(A, M[,1:15], Y, sims = 50)
out <- mediate_hdmm(A, M, Y, sims = 50)
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
source("R/hdmm_utils.R")
library(MASS)
library(mediation)
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_hdmm(A, M, Y, sims = 50)
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
source("R/hdmm_utils.R")
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_hdmm(A, M, Y, sims = 50)
library(MASS)
out <- mediate_hdmm(A, M, Y, sims = 50)
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
source("R/hdmm_utils.R")
library(MASS)
library(mediation)
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_hdmm(A, M, Y, sims = 50)
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
source("R/hdmm_utils.R")
library(MASS)
library(mediation)
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_hdmm(A, M, Y, sims = 50)
library(MASS)
library(mediation)
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_hdmm(A, M, Y, sims = 50)
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
PDM_1 =function(x,y,m,imax, tol, theta=theta, w1=w1, interval = interval, step = step)  {
I=diag(length(w1))
f=function(lambda,psi,phi){
crossprod(solve(lambda*I + psi) %*% phi) - 1
}
#negative log
g11=function(x,y,m,theta,w1,s1,s2){
crossprod(y-theta[3]-x*theta[5]-m%*%w1*theta[4]) / (1/s1^2)
}
g12=function(x,y,m,theta,w1,s1,s2){
crossprod(m%*%w1-theta[1]-x*theta[2]) / (1/s2^2)
}
count=0
for (i in 1:imax) {
mw1=m%*%w1
J=rep(1,nrow(m))
X1=cbind(J,x,mw1)
X2=cbind(J,x)
s1=sqrt( crossprod( y-X1%*%solve( crossprod(X1) )%*% crossprod(X1, y) )  / ( nrow(m)-3 ) )
s2=sqrt(  crossprod(mw1-X2%*%solve(  crossprod(X2) )%*% crossprod(X2, mw1)) / (nrow(m)-2) )
psi=as.numeric(1/s1^2)*crossprod(m)*(theta[4])^2
+as.numeric(1/s2^2)*t(m)%*%m
phi=as.numeric(1/s1^2)*crossprod(m, y-theta[3]-x*theta[5])*theta[4]
+as.numeric(1/s2^2)*crossprod(m, theta[1] + x*theta[2])
################################################################
################################################################
grid = round(2*interval/step)
temp=numeric( step + 1 )
for (i in 1 : (step + 1) ) {
temp[i]=f(- (interval + grid ) + grid*i, psi = psi, phi = phi)
}
################################################################
################################################################
for (i in 1: step ){
if ((temp[i]*temp[i+1])<0){
l= - (interval + grid ) + grid*i
h= - (interval + grid ) + grid*(i+1)
}
}
tryCatch({
lambda = uniroot(f, c(l, h), phi = phi, psi = psi) $ root
}, error=function(e){})
w1_new=solve(lambda*I+psi)%*%phi
theta_1=optim(theta,g11,x=x,y=y,m=m,s1=s1,s2=s2,w1=w1_new, method="BFGS")$par
theta_2=optim(theta,g12,x=x,y=y,m=m,s1=s1,s2=s2,w1=w1_new, method="BFGS")$par
theta_new=c(theta_2[1],theta_2[2],theta_1[3],theta_1[4],theta_1[5])
#L = vector(length=imax)
L = - crossprod(y-theta_new[3]-x*theta_new[5]-m%*%w1*theta_new[4]) / (2*s1^2)
- crossprod(m%*%w1-theta_new[1]-x*theta_new[2]) / (2*s2^2)
#     print(L[i])
#
print( paste( "Calculating the First PDM:", "log-likelihood is", L, sep = " "))
print( paste( "lambda", "=", lambda, sep = " "))
print( paste( "norm", "=", t(w1_new)%*%w1_new, sep = " "))
if (abs( crossprod(theta_new-theta) )<tol && abs( crossprod(w1_new - w1) )<tol) break
else {theta=theta_new
w1=w1_new}
count=count + 1
}
out1=list(w1,theta,lambda)
names(out1) <- c("w1","theta","lambda")
out1
}
library(MASS)
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_hdmm(A, M, Y, sims = 50)
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
source("R/hdmm_utils.R")
library(MASS)
library(mediation)
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
out <- mediate_hdmm(A, M, Y, sims = 50)
M1 <- M[,1:5]
out <- mediate_hdmm(A, M1, Y, sims = 50)
M1 <- M[,1:10]
out <- mediate_hdmm(A, M1, Y, sims = 50)
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
source("R/hdmm_utils.R")
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
M1 <- M[,1:10]
out <- mediate_hdmm(A, M1, Y, sims = 50)
rm(list=ls())
devtools::document()
devtools::build()
devtools::check()
devtools::document()
rm(list=ls())
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
source("R/hdmm_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
M1 <- M[,1:10]
out <- mediate_hdmm(A, M1, Y, sims = 50)
?mediate
?tryCatch
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
source("R/hdmm_utils.R")
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
M1 <- M[,1:10]
out <- mediate_hdmm(A, M1, Y, sims = 50)
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
source("R/hdmm_utils.R")
library(MASS)
library(mediation)
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
M1 <- M[,1:10]
out <- mediate_hdmm(A, M1, Y, sims = 50)
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
source("R/hdmm_utils.R")
library(MASS)
library(mediation)
str(med_dat)
A <- with(med_dat, as.numeric(scale(A)))
M <- with(med_dat, as.matrix(scale(M)))
Y <- with(med_dat, as.numeric(scale(Y)))
M1 <- M[,1:10]
out <- mediate_hdmm(A, M1, Y, sims = 50)
M1 <- M[,1:5]
out <- mediate_hdmm(A, M1, Y, sims = 50)
?optim
rm(list=ls())
load("data/med_dat.rda")
source("R/hdmm.R")
source("R/hdmm_utils.R")
library(MASS)
library(mediation)
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
